{"ast":null,"code":"var postcss = require('postcss');\n\nvar parser = require('postcss-selector-parser');\n\nfunction parse(str, rule) {\n  var nodes;\n  var saver = parser(function (parsed) {\n    nodes = parsed;\n  });\n\n  try {\n    saver.processSync(str);\n  } catch (e) {\n    if (str.indexOf(':') !== -1) {\n      throw rule ? rule.error('Missed semicolon') : e;\n    } else {\n      throw rule ? rule.error(e.message) : e;\n    }\n  }\n\n  return nodes.at(0);\n}\n\nfunction replace(nodes, parent) {\n  var replaced = false;\n  nodes.each(function (i) {\n    if (i.type === 'nesting') {\n      var clonedParent = parent.clone();\n\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())));\n      } else {\n        i.replaceWith(clonedParent);\n      }\n\n      replaced = true;\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true;\n      }\n    }\n  });\n  return replaced;\n}\n\nfunction selectors(parent, child) {\n  var result = [];\n  parent.selectors.forEach(function (i) {\n    var parentNode = parse(i, parent);\n    child.selectors.forEach(function (j) {\n      var node = parse(j, child);\n      var replaced = replace(node, parentNode);\n\n      if (!replaced) {\n        node.prepend(parser.combinator({\n          value: ' '\n        }));\n        node.prepend(parentNode.clone());\n      }\n\n      result.push(node.toString());\n    });\n  });\n  return result;\n}\n\nfunction pickComment(comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment);\n    return comment;\n  } else {\n    return after;\n  }\n}\n\nfunction atruleChilds(rule, atrule, bubbling) {\n  var children = [];\n  atrule.each(function (child) {\n    if (child.type === 'comment') {\n      children.push(child);\n    }\n\n    if (child.type === 'decl') {\n      children.push(child);\n    } else if (child.type === 'rule' && bubbling) {\n      child.selectors = selectors(rule, child);\n    } else if (child.type === 'atrule') {\n      atruleChilds(rule, child, bubbling);\n    }\n  });\n\n  if (bubbling) {\n    if (children.length) {\n      var clone = rule.clone({\n        nodes: []\n      });\n\n      for (var i = 0; i < children.length; i++) {\n        clone.append(children[i]);\n      }\n\n      atrule.prepend(clone);\n    }\n  }\n}\n\nfunction processRule(rule, bubble, unwrap, preserveEmpty) {\n  var unwrapped = false;\n  var after = rule;\n  rule.each(function (child) {\n    if (child.type === 'rule') {\n      unwrapped = true;\n      child.selectors = selectors(rule, child);\n      after = pickComment(child.prev(), after);\n      after.after(child);\n      after = child;\n    } else if (child.type === 'atrule') {\n      if (bubble[child.name]) {\n        unwrapped = true;\n        atruleChilds(rule, child, true);\n        after = pickComment(child.prev(), after);\n        after.after(child);\n        after = child;\n      } else if (unwrap[child.name]) {\n        unwrapped = true;\n        atruleChilds(rule, child, false);\n        after = pickComment(child.prev(), after);\n        after.after(child);\n        after = child;\n      }\n    }\n  });\n\n  if (unwrapped && preserveEmpty !== true) {\n    rule.raws.semicolon = true;\n    if (rule.nodes.length === 0) rule.remove();\n  }\n}\n\nfunction atruleNames(defaults, custom) {\n  var list = {};\n  var i, name;\n\n  for (i = 0; i < defaults.length; i++) {\n    list[defaults[i]] = true;\n  }\n\n  if (custom) {\n    for (i = 0; i < custom.length; i++) {\n      name = custom[i].replace(/^@/, '');\n      list[name] = true;\n    }\n  }\n\n  return list;\n}\n\nmodule.exports = postcss.plugin('postcss-nested', function (opts) {\n  if (!opts) opts = {};\n  var bubble = atruleNames(['media', 'supports'], opts.bubble);\n  var unwrap = atruleNames(['document', 'font-face', 'keyframes'], opts.unwrap);\n  var preserveEmpty = opts ? opts.preserveEmpty : false;\n\n  var process = function (node) {\n    node.each(function (child) {\n      if (child.type === 'rule') {\n        processRule(child, bubble, unwrap, preserveEmpty);\n      } else if (child.type === 'atrule') {\n        process(child);\n      }\n    });\n  };\n\n  return process;\n});","map":null,"metadata":{},"sourceType":"script"}