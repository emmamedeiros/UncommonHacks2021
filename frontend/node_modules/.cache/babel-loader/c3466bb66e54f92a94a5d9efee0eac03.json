{"ast":null,"code":"var postcss = require('postcss');\n\nvar IMPORTANT = /\\s*!important\\s*$/i;\nvar unitless = {\n  'box-flex': true,\n  'box-flex-group': true,\n  'column-count': true,\n  'flex': true,\n  'flex-grow': true,\n  'flex-positive': true,\n  'flex-shrink': true,\n  'flex-negative': true,\n  'font-weight': true,\n  'line-clamp': true,\n  'line-height': true,\n  'opacity': true,\n  'order': true,\n  'orphans': true,\n  'tab-size': true,\n  'widows': true,\n  'z-index': true,\n  'zoom': true,\n  'fill-opacity': true,\n  'stroke-dashoffset': true,\n  'stroke-opacity': true,\n  'stroke-width': true\n};\n\nfunction dashify(str) {\n  return str.replace(/([A-Z])/g, '-$1').replace(/^ms-/, '-ms-').toLowerCase();\n}\n\nfunction decl(parent, name, value) {\n  if (value === false || value === null) return;\n  name = dashify(name);\n\n  if (typeof value === 'number') {\n    if (value === 0 || unitless[name]) {\n      value = value.toString();\n    } else {\n      value += 'px';\n    }\n  }\n\n  if (name === 'css-float') name = 'float';\n\n  if (IMPORTANT.test(value)) {\n    value = value.replace(IMPORTANT, '');\n    parent.push(postcss.decl({\n      prop: name,\n      value: value,\n      important: true\n    }));\n  } else {\n    parent.push(postcss.decl({\n      prop: name,\n      value: value\n    }));\n  }\n}\n\nfunction atRule(parent, parts, value) {\n  var node = postcss.atRule({\n    name: parts[1],\n    params: parts[3] || ''\n  });\n\n  if (typeof value === 'object') {\n    node.nodes = [];\n    parse(value, node);\n  }\n\n  parent.push(node);\n}\n\nfunction parse(obj, parent) {\n  var name, value, node, i;\n\n  for (name in obj) {\n    if (obj.hasOwnProperty(name)) {\n      value = obj[name];\n\n      if (value === null || typeof value === 'undefined') {\n        continue;\n      } else if (name[0] === '@') {\n        var parts = name.match(/@([^\\s]+)(\\s+([\\w\\W]*)\\s*)?/);\n\n        if (Array.isArray(value)) {\n          for (i = 0; i < value.length; i++) {\n            atRule(parent, parts, value[i]);\n          }\n        } else {\n          atRule(parent, parts, value);\n        }\n      } else if (Array.isArray(value)) {\n        for (i = 0; i < value.length; i++) {\n          decl(parent, name, value[i]);\n        }\n      } else if (typeof value === 'object') {\n        node = postcss.rule({\n          selector: name\n        });\n        parse(value, node);\n        parent.push(node);\n      } else {\n        decl(parent, name, value);\n      }\n    }\n  }\n}\n\nmodule.exports = function (obj) {\n  var root = postcss.root();\n  parse(obj, root);\n  return root;\n};","map":null,"metadata":{},"sourceType":"script"}