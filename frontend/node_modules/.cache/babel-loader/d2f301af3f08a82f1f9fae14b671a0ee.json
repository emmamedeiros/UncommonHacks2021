{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveConfig;\n\nvar _some = _interopRequireDefault(require(\"lodash/some\"));\n\nvar _mergeWith = _interopRequireDefault(require(\"lodash/mergeWith\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _isUndefined = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _defaults = _interopRequireDefault(require(\"lodash/defaults\"));\n\nvar _map = _interopRequireDefault(require(\"lodash/map\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _toPath = _interopRequireDefault(require(\"lodash/toPath\"));\n\nvar _negateValue = _interopRequireDefault(require(\"./negateValue\"));\n\nvar _corePluginList = require(\"../corePluginList\");\n\nvar _configurePlugins = _interopRequireDefault(require(\"./configurePlugins\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst configUtils = {\n  negative(scale) {\n    return Object.keys(scale).filter(key => scale[key] !== '0').reduce((negativeScale, key) => ({ ...negativeScale,\n      [`-${key}`]: (0, _negateValue.default)(scale[key])\n    }), {});\n  },\n\n  breakpoints(screens) {\n    return Object.keys(screens).filter(key => typeof screens[key] === 'string').reduce((breakpoints, key) => ({ ...breakpoints,\n      [`screen-${key}`]: screens[key]\n    }), {});\n  }\n\n};\n\nfunction value(valueToResolve, ...args) {\n  return (0, _isFunction.default)(valueToResolve) ? valueToResolve(...args) : valueToResolve;\n}\n\nfunction mergeThemes(themes) {\n  const theme = (({\n    extend: _,\n    ...t\n  }) => t)(themes.reduce((merged, t) => {\n    return (0, _defaults.default)(merged, t);\n  }, {}));\n\n  return { ...theme,\n    // In order to resolve n config objects, we combine all of their `extend` properties\n    // into arrays instead of objects so they aren't overridden.\n    extend: themes.reduce((merged, {\n      extend\n    }) => {\n      return (0, _mergeWith.default)(merged, extend, (mergedValue, extendValue) => {\n        if ((0, _isUndefined.default)(mergedValue)) {\n          return [extendValue];\n        }\n\n        if (Array.isArray(mergedValue)) {\n          return [extendValue, ...mergedValue];\n        }\n\n        return [extendValue, mergedValue];\n      });\n    }, {})\n  };\n}\n\nfunction mergeExtensions({\n  extend,\n  ...theme\n}) {\n  return (0, _mergeWith.default)(theme, extend, (themeValue, extensions) => {\n    // The `extend` property is an array, so we need to check if it contains any functions\n    if (!(0, _isFunction.default)(themeValue) && !(0, _some.default)(extensions, _isFunction.default)) {\n      return { ...themeValue,\n        ...Object.assign({}, ...extensions)\n      };\n    }\n\n    return (resolveThemePath, utils) => ({ ...value(themeValue, resolveThemePath, utils),\n      ...Object.assign({}, ...extensions.map(e => value(e, resolveThemePath, utils)))\n    });\n  });\n}\n\nfunction resolveFunctionKeys(object) {\n  const resolvePath = (key, defaultValue) => {\n    const path = (0, _toPath.default)(key);\n    let index = 0;\n    let val = object;\n\n    while (val !== undefined && val !== null && index < path.length) {\n      val = val[path[index++]];\n      val = (0, _isFunction.default)(val) ? val(resolvePath, configUtils) : val;\n    }\n\n    return val === undefined ? defaultValue : val;\n  };\n\n  return Object.keys(object).reduce((resolved, key) => {\n    return { ...resolved,\n      [key]: (0, _isFunction.default)(object[key]) ? object[key](resolvePath, configUtils) : object[key]\n    };\n  }, {});\n}\n\nfunction extractPluginConfigs(configs) {\n  let allConfigs = [];\n  configs.forEach(config => {\n    allConfigs = [...allConfigs, config];\n    const plugins = (0, _get.default)(config, 'plugins', []);\n\n    if (plugins.length === 0) {\n      return;\n    }\n\n    plugins.forEach(plugin => {\n      if (plugin.__isOptionsFunction) {\n        plugin = plugin();\n      }\n\n      allConfigs = [...allConfigs, ...extractPluginConfigs([(0, _get.default)(plugin, 'config', {})])];\n    });\n  });\n  return allConfigs;\n}\n\nfunction resolveVariants([firstConfig, ...variantConfigs]) {\n  if (Array.isArray(firstConfig)) {\n    return firstConfig;\n  }\n\n  return [firstConfig, ...variantConfigs].reverse().reduce((resolved, variants) => {\n    Object.entries(variants || {}).forEach(([plugin, pluginVariants]) => {\n      if ((0, _isFunction.default)(pluginVariants)) {\n        resolved[plugin] = pluginVariants({\n          variants(path) {\n            return (0, _get.default)(resolved, path, []);\n          },\n\n          before(toInsert, variant, existingPluginVariants = (0, _get.default)(resolved, plugin, [])) {\n            if (variant === undefined) {\n              return [...toInsert, ...existingPluginVariants];\n            }\n\n            const index = existingPluginVariants.indexOf(variant);\n\n            if (index === -1) {\n              return [...existingPluginVariants, ...toInsert];\n            }\n\n            return [...existingPluginVariants.slice(0, index), ...toInsert, ...existingPluginVariants.slice(index)];\n          },\n\n          after(toInsert, variant, existingPluginVariants = (0, _get.default)(resolved, plugin, [])) {\n            if (variant === undefined) {\n              return [...existingPluginVariants, ...toInsert];\n            }\n\n            const index = existingPluginVariants.indexOf(variant);\n\n            if (index === -1) {\n              return [...toInsert, ...existingPluginVariants];\n            }\n\n            return [...existingPluginVariants.slice(0, index + 1), ...toInsert, ...existingPluginVariants.slice(index + 1)];\n          },\n\n          without(toRemove, existingPluginVariants = (0, _get.default)(resolved, plugin, [])) {\n            return existingPluginVariants.filter(v => !toRemove.includes(v));\n          }\n\n        });\n      } else {\n        resolved[plugin] = pluginVariants;\n      }\n    });\n    return resolved;\n  }, {});\n}\n\nfunction resolveCorePlugins(corePluginConfigs) {\n  const result = [...corePluginConfigs].reverse().reduce((resolved, corePluginConfig) => {\n    if ((0, _isFunction.default)(corePluginConfig)) {\n      return corePluginConfig({\n        corePlugins: resolved\n      });\n    }\n\n    return (0, _configurePlugins.default)(corePluginConfig, resolved);\n  }, _corePluginList.corePluginList);\n  return result;\n}\n\nfunction resolvePluginLists(pluginLists) {\n  const result = [...pluginLists].reverse().reduce((resolved, pluginList) => {\n    return [...resolved, ...pluginList];\n  }, []);\n  return result;\n}\n\nfunction resolveConfig(configs) {\n  const allConfigs = extractPluginConfigs(configs);\n  return (0, _defaults.default)({\n    theme: resolveFunctionKeys(mergeExtensions(mergeThemes((0, _map.default)(allConfigs, t => (0, _get.default)(t, 'theme', {}))))),\n    variants: resolveVariants(allConfigs.map(c => c.variants)),\n    corePlugins: resolveCorePlugins(allConfigs.map(c => c.corePlugins)),\n    plugins: resolvePluginLists(configs.map(c => (0, _get.default)(c, 'plugins', [])))\n  }, ...allConfigs);\n}","map":null,"metadata":{},"sourceType":"script"}