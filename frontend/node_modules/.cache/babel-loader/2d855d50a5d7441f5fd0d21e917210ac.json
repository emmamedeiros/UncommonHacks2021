{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _browserslist = _interopRequireDefault(require(\"browserslist\"));\n\nvar _node = _interopRequireDefault(require(\"postcss/lib/node\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _escapeClassName = _interopRequireDefault(require(\"../util/escapeClassName\"));\n\nvar _generateVariantFunction = _interopRequireDefault(require(\"../util/generateVariantFunction\"));\n\nvar _parseObjectStyles = _interopRequireDefault(require(\"../util/parseObjectStyles\"));\n\nvar _prefixSelector = _interopRequireDefault(require(\"../util/prefixSelector\"));\n\nvar _wrapWithVariants = _interopRequireDefault(require(\"../util/wrapWithVariants\"));\n\nvar _cloneNodes = _interopRequireDefault(require(\"../util/cloneNodes\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction parseStyles(styles) {\n  if (!Array.isArray(styles)) {\n    return parseStyles([styles]);\n  }\n\n  return _lodash.default.flatMap(styles, style => style instanceof _node.default ? style : (0, _parseObjectStyles.default)(style));\n}\n\nfunction wrapWithLayer(rules, layer) {\n  return _postcss.default.atRule({\n    name: 'layer',\n    params: layer\n  }).append((0, _cloneNodes.default)(Array.isArray(rules) ? rules : [rules]));\n}\n\nfunction isKeyframeRule(rule) {\n  return rule.parent && rule.parent.type === 'atrule' && /keyframes$/.test(rule.parent.name);\n}\n\nfunction _default(plugins, config) {\n  const pluginBaseStyles = [];\n  const pluginComponents = [];\n  const pluginUtilities = [];\n  const pluginVariantGenerators = {};\n\n  const applyConfiguredPrefix = selector => {\n    return (0, _prefixSelector.default)(config.prefix, selector);\n  };\n\n  const getConfigValue = (path, defaultValue) => path ? _lodash.default.get(config, path, defaultValue) : config;\n\n  const browserslistTarget = (0, _browserslist.default)().includes('ie 11') ? 'ie11' : 'relaxed';\n  plugins.forEach(plugin => {\n    if (plugin.__isOptionsFunction) {\n      plugin = plugin();\n    }\n\n    const handler = (0, _isFunction.default)(plugin) ? plugin : _lodash.default.get(plugin, 'handler', () => {});\n    handler({\n      postcss: _postcss.default,\n      config: getConfigValue,\n      theme: (path, defaultValue) => {\n        const value = getConfigValue(`theme.${path}`, defaultValue);\n\n        const [rootPath] = _lodash.default.toPath(path);\n\n        if (['fontSize', 'outline'].includes(rootPath)) {\n          return Array.isArray(value) ? value[0] : value;\n        }\n\n        return value;\n      },\n      corePlugins: path => {\n        if (Array.isArray(config.corePlugins)) {\n          return config.corePlugins.includes(path);\n        }\n\n        return getConfigValue(`corePlugins.${path}`, true);\n      },\n      variants: (path, defaultValue) => {\n        if (Array.isArray(config.variants)) {\n          return config.variants;\n        }\n\n        return getConfigValue(`variants.${path}`, defaultValue);\n      },\n      target: path => {\n        if (_lodash.default.isString(config.target)) {\n          return config.target === 'browserslist' ? browserslistTarget : config.target;\n        }\n\n        const [defaultTarget, targetOverrides] = getConfigValue('target', 'relaxed');\n\n        const target = _lodash.default.get(targetOverrides, path, defaultTarget);\n\n        return target === 'browserslist' ? browserslistTarget : target;\n      },\n      e: _escapeClassName.default,\n      prefix: applyConfiguredPrefix,\n      addUtilities: (utilities, options) => {\n        const defaultOptions = {\n          variants: [],\n          respectPrefix: true,\n          respectImportant: true\n        };\n        options = Array.isArray(options) ? Object.assign({}, defaultOptions, {\n          variants: options\n        }) : _lodash.default.defaults(options, defaultOptions);\n\n        const styles = _postcss.default.root({\n          nodes: parseStyles(utilities)\n        });\n\n        styles.walkRules(rule => {\n          if (options.respectPrefix && !isKeyframeRule(rule)) {\n            rule.selector = applyConfiguredPrefix(rule.selector);\n          }\n\n          if (options.respectImportant && config.important) {\n            rule.__tailwind = { ...rule.__tailwind,\n              important: config.important\n            };\n          }\n        });\n        pluginUtilities.push(wrapWithLayer((0, _wrapWithVariants.default)(styles.nodes, options.variants), 'utilities'));\n      },\n      addComponents: (components, options) => {\n        const defaultOptions = {\n          variants: [],\n          respectPrefix: true\n        };\n        options = Array.isArray(options) ? Object.assign({}, defaultOptions, {\n          variants: options\n        }) : _lodash.default.defaults(options, defaultOptions);\n\n        const styles = _postcss.default.root({\n          nodes: parseStyles(components)\n        });\n\n        styles.walkRules(rule => {\n          if (options.respectPrefix && !isKeyframeRule(rule)) {\n            rule.selector = applyConfiguredPrefix(rule.selector);\n          }\n        });\n        pluginComponents.push(wrapWithLayer((0, _wrapWithVariants.default)(styles.nodes, options.variants), 'components'));\n      },\n      addBase: baseStyles => {\n        pluginBaseStyles.push(wrapWithLayer(parseStyles(baseStyles), 'base'));\n      },\n      addVariant: (name, generator, options = {}) => {\n        pluginVariantGenerators[name] = (0, _generateVariantFunction.default)(generator, options);\n      }\n    });\n  });\n  return {\n    base: pluginBaseStyles,\n    components: pluginComponents,\n    utilities: pluginUtilities,\n    variantGenerators: pluginVariantGenerators\n  };\n}","map":null,"metadata":{},"sourceType":"script"}