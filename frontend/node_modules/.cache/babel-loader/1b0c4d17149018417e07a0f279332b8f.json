{"ast":null,"code":"!function (e, i) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? i(exports, require(\"tailwindcss/lib/util/resolveConfig.js\"), require(\"tailwindcss/lib/util/processPlugins.js\"), require(\"tailwindcss/stubs/defaultConfig.stub.js\"), require(\"dlv\"), require(\"dset\")) : \"function\" == typeof define && define.amd ? define([\"exports\", \"tailwindcss/lib/util/resolveConfig.js\", \"tailwindcss/lib/util/processPlugins.js\", \"tailwindcss/stubs/defaultConfig.stub.js\", \"dlv\", \"dset\"], i) : i(e.tailwindMacro = {}, e.resolveTailwindConfig, e.processPlugins, e.defaultTailwindConfig, e.dlv, e.dset);\n}(this, function (e, i, r, n, t, o) {\n  var l, s;\n\n  function a(e) {\n    var i = {};\n\n    for (var r in e) if (e[r] === Object(e[r])) for (var n in e[r]) i[r + (\"default\" === n ? \"\" : \"-\" + n)] = e[r][n];else i[r] = e[r];\n\n    return i;\n  }\n\n  i = i && i.hasOwnProperty(\"default\") ? i.default : i, r = r && r.hasOwnProperty(\"default\") ? r.default : r, n = n && n.hasOwnProperty(\"default\") ? n.default : n, t = t && t.hasOwnProperty(\"default\") ? t.default : t, o = o && o.hasOwnProperty(\"default\") ? o.default : o, e.resolveConfig = function (e) {\n    return l || (l = i([e, n]));\n  }, e.stringifyScreen = function (e, i) {\n    var r = t(e, [\"theme\", \"screens\", i]);\n    if (void 0 === r) throw new Error(\"Couldn’t find Tailwind screen: \" + i);\n    if (\"string\" == typeof r) return \"@media (min-width: \" + r + \")\";\n    if (\"string\" == typeof r.raw) return \"@media \" + r.raw;\n    var n = (Array.isArray(r) ? r : [r]).map(function (e) {\n      return [\"string\" == typeof e.min ? \"(min-width: \" + e.min + \")\" : null, \"string\" == typeof e.max ? \"(max-width: \" + e.max + \")\" : null].filter(Boolean).join(\" and \");\n    }).join(\", \");\n    return n ? \"@media \" + n : \"\";\n  }, e.resolveStyle = function (e, i, r) {\n    for (var n, o, l = 0, s = i; l < s.length; l += 1) {\n      var u = s[l];\n\n      if ([\"backgroundColor\", \"borderColor\", \"textColor\", \"fill\", \"stroke\"].includes(u.config)) {\n        var f = a(t(e, [\"theme\", u.config], {}));\n        if (void 0 !== f[r]) return (n = {})[u.prop] = f[r], n;\n      } else {\n        var d = t(e, [\"theme\", u.config, r]);\n        if (void 0 !== d) return \"fontFamily\" === u.config && Array.isArray(d) && (d = d.join(\", \")), (o = {})[u.prop] = d, o;\n      }\n    }\n\n    return {};\n  }, e.resolveStyleFromPlugins = function (e, i) {\n    if (s || (s = {}, e.plugins && e.plugins.length && r(e.plugins, e).utilities.forEach(function (e) {\n      \"atrule\" === e.type && \"variants\" === e.name && e.each(function (e) {\n        var i = e.selector.match(/^\\.(\\S+)(\\s+.*?)?$/);\n\n        if (null !== i) {\n          var r = i[1],\n              n = i[2],\n              t = n ? [r, n.trim()] : [r];\n          o(s, t, {}), e.walkDecls(function (e) {\n            o(s, t.concat(e.prop), e.value);\n          });\n        }\n      });\n    })), void 0 === s[i]) throw new Error(\"Couldn’t resolve Tailwind class name: \" + i);\n    return s[i];\n  };\n});","map":null,"metadata":{},"sourceType":"script"}