{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _node = _interopRequireDefault(require(\"postcss/lib/node\"));\n\nvar _escapeClassName = _interopRequireDefault(require(\"../util/escapeClassName\"));\n\nvar _generateVariantFunction = _interopRequireDefault(require(\"../util/generateVariantFunction\"));\n\nvar _parseObjectStyles = _interopRequireDefault(require(\"../util/parseObjectStyles\"));\n\nvar _prefixSelector = _interopRequireDefault(require(\"../util/prefixSelector\"));\n\nvar _wrapWithVariants = _interopRequireDefault(require(\"../util/wrapWithVariants\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction parseStyles(styles) {\n  if (!Array.isArray(styles)) {\n    return parseStyles([styles]);\n  }\n\n  return _lodash.default.flatMap(styles, style => style instanceof _node.default ? style : (0, _parseObjectStyles.default)(style));\n}\n\nfunction _default(plugins, config) {\n  const pluginBaseStyles = [];\n  const pluginComponents = [];\n  const pluginUtilities = [];\n  const pluginVariantGenerators = {};\n\n  const applyConfiguredPrefix = selector => {\n    return (0, _prefixSelector.default)(config.prefix, selector);\n  };\n\n  const getConfigValue = (path, defaultValue) => _lodash.default.get(config, path, defaultValue);\n\n  plugins.forEach(plugin => {\n    plugin({\n      postcss: _postcss.default,\n      config: getConfigValue,\n      theme: (path, defaultValue) => getConfigValue(\"theme.\".concat(path), defaultValue),\n      variants: (path, defaultValue) => {\n        if (_lodash.default.isArray(config.variants)) {\n          return config.variants;\n        }\n\n        return getConfigValue(\"variants.\".concat(path), defaultValue);\n      },\n      e: _escapeClassName.default,\n      prefix: applyConfiguredPrefix,\n      addUtilities: (utilities, options) => {\n        const defaultOptions = {\n          variants: [],\n          respectPrefix: true,\n          respectImportant: true\n        };\n        options = Array.isArray(options) ? Object.assign({}, defaultOptions, {\n          variants: options\n        }) : _lodash.default.defaults(options, defaultOptions);\n\n        const styles = _postcss.default.root({\n          nodes: parseStyles(utilities)\n        });\n\n        styles.walkRules(rule => {\n          if (options.respectPrefix) {\n            rule.selector = applyConfiguredPrefix(rule.selector);\n          }\n\n          if (options.respectImportant && _lodash.default.get(config, 'important')) {\n            rule.walkDecls(decl => decl.important = true);\n          }\n        });\n        pluginUtilities.push((0, _wrapWithVariants.default)(styles.nodes, options.variants));\n      },\n      addComponents: (components, options) => {\n        options = Object.assign({\n          respectPrefix: true\n        }, options);\n\n        const styles = _postcss.default.root({\n          nodes: parseStyles(components)\n        });\n\n        styles.walkRules(rule => {\n          if (options.respectPrefix) {\n            rule.selector = applyConfiguredPrefix(rule.selector);\n          }\n        });\n        pluginComponents.push(...styles.nodes);\n      },\n      addBase: baseStyles => {\n        pluginBaseStyles.push(...parseStyles(baseStyles));\n      },\n      addVariant: (name, generator) => {\n        pluginVariantGenerators[name] = (0, _generateVariantFunction.default)(generator);\n      }\n    });\n  });\n  return {\n    base: pluginBaseStyles,\n    components: pluginComponents,\n    utilities: pluginUtilities,\n    variantGenerators: pluginVariantGenerators\n  };\n}","map":null,"metadata":{},"sourceType":"script"}